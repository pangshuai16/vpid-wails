name: Wails build

on:
  push:
    tags:
      # Match any new tag
      - "*"

env:
  # Necessary for most environments as build failure can occur due to OOM issues
  APP_NAME: "usb_list"
  # NODE_OPTIONS: "--max-old-space-size=4096"
  # NODE_VERSION: "20"
  # PNPM_VERSION: "8.10.0"
  GO_VERSION: "1.21.8"

jobs:
  build:
    permissions:
      contents: write
    strategy:
      # Failure in one platform build won't impact the others
      fail-fast: false
      matrix:
        build:
          - name: "linux-amd64"
            platform: "linux/amd64"
            os: "ubuntu-latest"
          - name: "linux-arm64"
            platform: "linux/arm64"
            os: "ubuntu-latest"
          - name: "windows-amd64"
            platform: "windows/amd64"
            os: "windows-latest"
          - name: "macos-amd64"
            platform: "darwin/amd64"
            os: "macos-latest"

    runs-on: ${{ matrix.build.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # ubuntu 安装依赖
      - name: install dependencies (ubuntu only)
        if: matrix.build.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl libusb-1.0

      # macos 安装依赖
      - name: install dependencies (macos only)
        if: matrix.build.os == 'macos-latest'
        run: |
          brew install upx libusb

      # windows 安装依赖
      - name: install msys2 (windows only)
        if: matrix.build.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: "UCRT64"
          update: true
          release: false
          install: >-
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-upx
            mingw-w64-ucrt-x86_64-libusb

      # 前端打包
      - name: Web Build
        uses: oven-sh/setup-bun@v1
      - run: |
          cd frontend
          bun install --frozen-lockfile
          bun run build

      # 安装 wails
      - uses: actions/setup-go@v5
        with:
          go-version: ${{env.GO_VERSION}} # The Go version to download (if necessary) and use.
      - run: |
          go env
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # 编译
      - name: Build wails
        if: matrix.build.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          export PATH="/c/Users/runneradmin/go/bin:/c/hostedtoolcache/windows/go/${{ env.GO_VERSION }}/x64/bin:$PATH"
          wails build -s -platform="${{ matrix.build.platform }}" -webview2=download  -ldflags="-extldflags=-static -w -s" -o ${{ env.APP_NAME }}-${{matrix.build.name}}
      - name: Build wails (linux & macos)
        if: matrix.build.os != 'windows-latest'
        run: |
          wails build -s -platform="${{ matrix.build.platform }}" -ldflags="-extldflags=-static -w -s" -o ${{ env.APP_NAME }}-${{matrix.build.name}}

      # 发布 release
      - uses: actions/upload-artifact@v3
        with:
          name: Wails Build ${{runner.os}} ${{matrix.build.name}}
          path: |
            */bin/
            *\bin\*
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            */bin/*
