name: Wails build

on:
  push:
    tags:
      # Match any new tag
      - "*"

env:
  # Necessary for most environments as build failure can occur due to OOM issues
  NODE_OPTIONS: "--max-old-space-size=4096"
  NODE_VERSION: "20"
  PNPM_VERSION: "8.10.0"
  GO_VERSION: "1.20"

jobs:
  # 任务：创建 release 版本
  # create-release:
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-latest
  #   outputs:
  #     RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Create Release
  #       id: create_release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')

  # 任务：构建
  build:
    permissions:
      contents: write
    # needs: create-release
    strategy:
      # Failure in one platform build won't impact the others
      fail-fast: false
      matrix:
        build:
          - name: "usb_list"
            platform: "linux/amd64"
            os: "ubuntu-latest"
          # - name: "usb_list"
          #   platform: "linux/arm64"
          #   os: "ubuntu-latest"
          # - name: "usb_list"
          #   platform: "windows/amd64"
          #   os: "windows-latest"
          # - name: "usb_list"
          #   platform: "darwin/universal"
          #   os: "macos-latest"

    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # - name: Setup pnpm
      #   uses: pnpm/action-setup@v2
      #   with:
      #     version: ${{env.PNPM_VERSION}}
      #     run_install: false
      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: ${{ env.NODE_VERSION }}
      #     cache: "pnpm"
      #     cache-dependency-path: "frontend/pnpm-lock.yaml"

      # - run: |
      #     cd frontend
      #     pnpm install
      #     pnpm run build

      # - uses: actions/setup-go@v5
      #   with:
      #     go-version: ${{ env.GO_VERSION }} # The Go version to download (if necessary) and use.
      # - run: |
      #     go env
      #     go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # ubuntu 安装依赖
      - name: install dependencies (ubuntu only)
        if: matrix.build.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libusb-1.0 upx-ucl libgtk-3-dev libwebkit2gtk-4.0-dev
      # - name: install arm64 dependencies (linux only)
      #   if: matrix.build.platform == 'linux/arm64'
      #   run: |
      #     sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      # macos 安装依赖
      # - name: install dependencies (macos only)
      #   if: matrix.build.os == 'macos-latest'
      #   run: |
      #     brew install libusb

      # windows 安装依赖
      # - name: install msys2 (windows only)
      #   if: matrix.build.os == 'windows-latest'
      #   uses: msys2/setup-msys2@v2
      #   with:
      #     # msystem: UCRT64
      #     update: true
      #     release: false
      # - name: set environment variables (windows only)
      #   if: matrix.build.os == 'windows-latest'
      #   shell: powershell
      #   run: |
      #     $env:Path+=";C:\msys64\ucrt64\bin"
      # - name: install dependencies (windows only)
      #   if: matrix.build.os == 'windows-latest'
      #   shell: msys2 {0}
      #   run: |
      #     pacman -S --noconfirm --needed mingw-w64-x86_64-gcc mingw-w64-x86_64-libusb mingw-w64-x86_64-pkg-config mingw-w64-x86_64-upx

      # 编译 windows
      # - name: Build wails
      #   if: matrix.build.os == 'windows-latest'
      #   shell: msys2 {0}
      #   run: |
      #     export PATH="/c/Users/runneradmin/go/bin:/c/hostedtoolcache/windows/go/${{ env.GO_VERSION }}/x64/bin:$PATH"
      #     wails build -s -platform="${{ matrix.build.platform }}" -upx -webview2=download  -ldflags="-extldflags=-static"
      # 编译 非 windows
      # - name: Build wails not windows
      #   if: matrix.build.os != 'windows-latest'
      #   run: |
      #     wails build -s -platform="${{ matrix.build.platform }}" -upx -ldflags="-extldflags=-static"
      # 发布 release
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: Wails Build ${{runner.os}} ${{matrix.build.name}}
      #     path: |
      #       */bin/
      #       *\bin\*
      # - name: Create Release
      #   if: startsWith(github.ref, 'refs/tags/')
      #   id: create_release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: |
      #       */bin/*
      - uses: dAppServer/wails-build-action@v2.2
        with:
          build-name: wailsApp
          build-platform: ${{matrix.build.platform}}
          go-version: ${{ env.GO_VERSION }}
          node-version: ${{ env.NODE_VERSION }}
